
#!/usr/bin/zsh
# A menu driven shell script sample template
## ----------------------------------
# Kali POST INSTALL
# ----------------------------------

## Bash colours
GREEN="\033[01;32m"
YELLOW="\033[01;33m"
BLUE="\033[01;34m"
BOLD="\033[01;01m"
RED="\033[01;31m"
RESET="\033[00m"


myuser=$(whoami)
EDITOR=vim
PASSWD=/etc/passwd
STD='\033[0;0;39m'
TOOLS_ROOT="/home/kali/tools/"
SUB_DIR="wifi"
SUB_DIR2="android"
IDE_SUB="ide"
INSTALL_DIR=$TOOLS_ROOT/$SUB_DIR



if [ "$(id -u)" != "0" ]; then
    echo -e "\n${RED}Please run this script with sudo ${RESET} "
    exit 1
fi


# -------------------------------------------------------------------------------------------------
create_tools_subdirs() {
  echo -e "\n${GREEN}Creating tools subdirs ${RESET}"
	     mkdir -p tools/{android,exploit,ide,sdr,web/xss}
       pause
}
# -------------------------------------------------------------------------------------------------
create_tools_root() {
  if [ -d "$TOOLS_ROOT" ]; then
    ### Take action if $DIR exists ###
    echo -e "\n tools root directory already exists "
  else
    ###  Control will jump here if $DIR does NOT exists ###
	echo -e "\nCreating tools root directory ${GREEN} $TOOLS_ROOT ${RESET}"
    mkdir $TOOLS_ROOT
  fi
}
# -------------------------------------------------------------------------------------------------
create_sub_dir() {
  if [ -d "$TOOLS_ROOT_DIR/$SUB_DIR" ]; then
    echo "Installing config files in ${DIR}..."
  else
    ###  Control will jump here if $DIR does NOT exists ###
	echo -e "\nCreating tools sub directory ${GREEN} $SUB_DIR ${RESET} "
    mkdir $TOOLS_ROOT/$SUB_DIR

fi
}
# -------------------------------------------------------------------------------------------------
create_sub_dir2() {
  if [ -d "$TOOLS_ROOT_DIR/$SUB_DIR" ]; then
    echo "Installing config files in ${DIR}..."
  else
    ###  Control will jump here if $DIR does NOT exists ###
	echo -e "\nCreating tools sub directory ${GREEN} $SUB_DIR2 ${RESET} "
    mkdir $TOOLS_ROOT/$SUB_DIR2

fi
}
# -------------------------------------------------------------------------------------------------

basic_software(){
  echo -e "\n${GREEN}Install basic software${RESET}"
        apt -y install python-pip python3-pip apt-transport-https ca-certificates curl gnupg-agent software-properties-common
}
# -------------------------------------------------------------------------------------------------
# User defined function
# ----------------------------------
pause(){
  read -p "Press [Enter] key to continue..." fackEnterKey
}
# -------------------------------------------------------------------------------------------------
one(){
	echo -e "\n${GREEN}Enable ssh${RESET}"
        systemctl start ssh
        systemctl enable ssh
        pause
}
# -------------------------------------------------------------------------------------------------
two(){
	echo -e "\n${GREEN}Enable autologin${RESET}"
        sed -i s/#autologin-user=/autologin-user=kali/g /etc/lightdm/lightdm.conf
        sed -i s/#autologin-user-timeout=0/autologin-user-timeout=0/g /etc/lightdm/lightdm.conf
        pause
}
# -------------------------------------------------------------------------------------------------
three(){
	echo -e "\n${GREEN}Disable IPv6 GRUB${RESET}"
	    	sed -ie 's/GRUB_CMDLINE_LINUX_DEFAULT="\(.*\)"/GRUB_CMDLINE_LINUX_DEFAULT="quiet splash ipv6.disable=1"/g' /etc/default/grub
		    sed -ie 's/GRUB_CMDLINE_LINUX="\(.*\)"/GRUB_CMDLINE_LINUX="ipv6.disable=1"/g'  /etc/default/grub
        update-grub
	    	pause
}
# -------------------------------------------------------------------------------------------------
four(){
	echo -e "\n${GREEN}Enable IPv6 GRUB${RESET}"
        sed -ie 's/GRUB_CMDLINE_LINUX_DEFAULT="quiet splash ipv6.disable=1"/GRUB_CMDLINE_LINUX_DEFAULT="quiet"/g' /etc/default/grub
        sed -ie 's/GRUB_CMDLINE_LINUX="ipv6.disable=1"/GRUB_CMDLINE_LINUX=""/g'  /etc/default/grub
        update-grub
	    	pause
}
# -------------------------------------------------------------------------------------------------
five(){
	echo -e "\n${GREEN}Use zsh as default shell${RESET}"
        #apt install -y zsh zsh-syntax-highlighting zsh-autosuggestions
        read -p 'What is your password?' sudo_password
	      sudo -S chsh -s '/usr/bin/zsh' "${USER}" < "${sudo_password}"
        source ~/.zshrc

}
# -------------------------------------------------------------------------------------------------
twenty(){
	echo -e "\n${GREEN}Install Golang (GO)${RESET}"
	      apt install -y golang
        echo "\n" >> ~/.zshrc
        echo 'export GOROOT=/usr/lib/go' >> ~/.zshrc
        echo 'export GOPATH=$HOME/go' >> ~/.zshrc
        echo 'export PATH=$GOPATH/bin:$GOROOT/bin:$PATH' >> ~/.zshrc
		    pause
}
# -------------------------------------------------------------------------------------------------
twentyone(){
	echo -e "\n${GREEN}Install Node Version Manager (nvm)${RESET}"
        curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.35.3/install.sh | sh
        sleep 2
        echo "\n" >> ~/.zshrc
        echo 'export NVM_DIR="$HOME/.nvm"' >> ~/.zshrc
        echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> ~/.zshrc
        pause

}
# -------------------------------------------------------------------------------------------------
twentytwo(){
	echo -e "\n${GREEN}Install Simple Python version management (pyenv)${RESET}"
		    curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | sh

        pause
}
# -------------------------------------------------------------------------------------------------
twentythree(){
	echo -e "\n${GREEN}Install Oh-My-Zsh${RESET}"
		    wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | zsh
		    pause
}
# -------------------------------------------------------------------------------------------------
twentyfour(){
  echo -e "\n${GREEN}Install plank dock${RESET}"
        apt --fix-broken install
        apt -y install plank
		    pause
}
# -------------------------------------------------------------------------------------------------
twentyfive(){
	echo -e "\n${GREEN}Install geckodriver${RESET}"
        wget https://github.com/mozilla/geckodriver/releases/download/v0.26.0/geckodriver-v0.26.0-linux64.tar.gz
        tar -xzvf geckodriver-v0.26.0-linux64.tar.gz
        mv geckodriver /usr/bin
        pause
}
# -------------------------------------------------------------------------------------------------
twentysix(){
  echo "\n${GREEN}Placeholder${RESET}"
		    pause
}
# -------------------------------------------------------------------------------------------------
thirty(){
	echo -e "\n${GREEN}Install Atom editor${RESET}"
        wget https://atom.io/download/deb -O atom.deb
        dpkg -i atom.deb
		    pause
}
# -------------------------------------------------------------------------------------------------
thirtyone(){
	echo -e "\n${GREEN}Install Google Chrome${RESET}"
	     wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
       dpkg -i google-chrome-stable_current_amd64.deb
		   pause
}
# -------------------------------------------------------------------------------------------------
thirtytwo(){
	echo -e "\n${GREEN}Install Pycharm ${RESET}"
       cd $TOOLS_ROOT/
	  	 mkdir -p tools/{android,exploit,ide,sdr,web/xss}
		   cd $IDE_SUB/
		   wget https://download-cf.jetbrains.com/python/pycharm-community-2020.2.tar.gz
		   tar -xzvf pycharm-community-2020.2.tar.gz
       cd pycharm-community-2020.2/ && bin/pycharm.sh
}
-------------------------------------------------------------------------------------------------
thirtythree(){
	echo -e "\n${GREEN}Install Joplin${RESET}"
        wget -O - https://raw.githubusercontent.com/laurent22/joplin/master/Joplin_install_and_update.sh | sh
		    pause
}

# -------------------------------------------------------------------------------------------------


# -------------------------------------------------------------------------------------------------
forty(){
	echo -e "\n${GREEN}Install bluetooth tools${RESET}"
        apt -y install kali-tools-bluetooth	bluetooth bluez libbluetooth-dev libudev-dev
		    pause
}
# -------------------------------------------------------------------------------------------------
fortyone(){
	echo -e "\n${GREEN}Install fuzzing tools${RESET}"
        apt -y install kali-tools-fuzzing
		    pause
}
# -------------------------------------------------------------------------------------------------
fortytwo(){
	echo -e "\n${GREEN}Install SDR tools${RESET}"
        apt -y install kali-tools-sdr
		    pause
}
# -------------------------------------------------------------------------------------------------
fortythree(){
	echo -e "\n${GREEN}Install wireless tools${RESET}"
        apt -y install kali-tools-802-11
		    pause
}
# -------------------------------------------------------------------------------------------------
fortyfour(){
	echo -e "\n${GREEN}Install Powershell-Empire${RESET}"
        apt -y install powershell-empire
		    pause
}
# -------------------------------------------------------------------------------------------------
fortyfive(){
	echo -e "\nInstall"

		pause
}
# -------------------------------------------------------------------------------------------------
fifty(){
	echo -e "\n${GREEN}Configure Atom styles.less (Tab Highlight)${RESET}"
        sleep 4
        su kali -c "
        cat <<'EOF' >> /home/kali/.atom/styles.less
        // Highlight active tab
        .tab-bar .tab.active[data-type$="Editor"] {
        background-color: #167373;
        }
        EOF"
}
# -------------------------------------------------------------------------------------------------
fiftyone(){
	echo -e "\n${GREEN} Install atom plugin: set-syntax ${RESET}"
        sleep 4
        apm install set-syntax
        pause
}
# -------------------------------------------------------------------------------------------------
fiftytwo(){
	echo -e "\n${GREEN} Install atom plugin: terminal-tab ${RESET}"
        sleep 4
        apm install terminal-tab
        pause
}


# -------------------------------------------------------------------------------------------------
sixty(){
	echo -e "\n${GREEN}Fix isc-dhcp-server ${RESET}"
        apt update -y
        apt -y install isc-dhcp-server

}
# -------------------------------------------------------------------------------------------------
# function to display menus
show_menus() {
	clear
	echo "~~~~~~~~~~~~~~~~~~~~~"
	echo " M A I N - M E N U"
	echo "~~~~~~~~~~~~~~~~~~~~~"
	echo "${BLUE}Configuration${RESET}"
	echo "1. Enable ssh service"
	echo "2. Enable autologin kali user"
	echo "3. Disable ipv6 (update-grub)"
	echo "4. Enable ipv6 (update-grub)"
  echo "5. Use zsh as default shell"
	echo "${BLUE}Additional tools${RESET}"
  echo "20. Install Golang (GO)"
	echo "21. Install Node Version Manager (nvm)"
	echo "22. Install Simple Python version management (pyenv)"
	echo "23. Install Simple Oh-My-Zsh"
  echo "24. Install Plank dock"
	echo "${BLUE}3rd party software${RESET}"
	echo "30. Install Atom editor"
	echo "31. Install Google Chrome"
	echo "32. Install Pycharm IDE"
  echo "${BLUE}Tools & Metapackages${RESET}"
 	echo "40. Install Bluetooth tools"
  echo "41. Install Fuzzing tools"
  echo "42. Install SDR tools"
  echo "43. Install Wireless tools"
  echo "44. Install Powershell Empire"
  echo "${BLUE}Configuration & Customizing ${RESET}"
  echo "50. Configure Atom styles.less"
  echo "51. Install atom plugin: set-syntax"
  echo "52. Install atom plugin: x-terminal"
  echo "${BLUE}Fixes ${RESET}"
  echo "60. Fix isc-dhcp-server"
	echo "99. Exit"
}
# read input from the keyboard and take a action

read_options(){
	local choice
	read -p "Enter choice [ 1 - 99] 99 for exit  " choice
	case $choice in
		1) one ;;
		2) two ;;
    3) three ;;
		4) four ;;
		5) five ;;
		6) six ;;
		7) seven ;;
    20) twenty  ;;
    21) twentyone  ;;
    22) twentytwo  ;;
    23) twentythree  ;;
    24) twentyfour ;;
    25) twentyfive ;;
    26) twentysix ;;
		30) thirty ;;
		31) thirtyone ;;
		32) thirtytwo ;;
		33) thirtythree ;;
    40) forty ;;
    41) fortyone ;;
    42) fortytwo ;;
    43) fortythree ;;
    44) fortyfour ;;
    50) fifty ;;
    51) fiftyone ;;
    52) fiftytwo ;;
    53) fiftythree ;;
    54) fiftyfour ;;
    55) fiftyfive ;;
    56) fiftysix ;;
    57) fiftyseven ;;
    58) fiftyeight ;;
    59) fiftysetsnine ;;
    60) sixty ;;
		99) exit 0;;
		*) echo -e "${RED}Error...${STD}" && sleep 2
	esac
}

# ----------------------------------------------
# Step #3: Trap CTRL+C, CTRL+Z and quit singles
# ----------------------------------------------
trap '' SIGINT SIGQUIT SIGTSTP

# -----------------------------------
# Step #4: Main logic - infinite loop
# ------------------------------------
while true
do
	show_menus
	read_options
done

}
