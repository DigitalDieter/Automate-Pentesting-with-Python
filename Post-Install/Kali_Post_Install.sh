#!/bin/bash
# A menu driven shell script sample template
## ----------------------------------
# Step #1: Define variables
# ----------------------------------

## Bash colours
GREEN="\033[01;32m"
YELLOW="\033[01;33m"
BLUE="\033[01;34m"
BOLD="\033[01;01m"
RED="\033[01;31m"
RESET="\033[00m"


myuser=$(whoami)
EDITOR=vim
PASSWD=/etc/passwd
STD='\033[0;0;39m'
TOOLS_ROOT="/home/kali/tools/"
SUB_DIR="wifi"
IDE_SUB="IDE"
INSTALL_DIR=$TOOLS_ROOT/$SUB_DIR


#!/bin/bash
if [[ $EUID -ne 0 ]]; then
    echo "Please run this script with sudo:"
    echo -e "\n${RED}Please run this script with sudo ${RESET} "
    echo "sudo $0 $*"
    exit 1
fi
# -------------------------------------------------------------------------------------------------
create_tools_root() {
  if [ -d "$TOOLS_ROOT" ]; then
    ### Take action if $DIR exists ###
    echo -e "\n tools root directory already exists "
  else
    ###  Control will jump here if $DIR does NOT exists ###
	echo -e "\nCreating tools root directory ${GREEN} $TOOLS_ROOT ${RESET}"
    mkdir $TOOLS_ROOT
  fi
}
# -------------------------------------------------------------------------------------------------
create_sub_dir() {
  if [ -d "$TOOLS_ROOT_DIR/$SUB_DIR" ]; then
    echo "Installing config files in ${DIR}..."
  else
    ###  Control will jump here if $DIR does NOT exists ###
	echo -e "\nCreating tools sub directory ${GREEN} $SUB_DIR ${RESET} "
    mkdir $TOOLS_ROOT/$SUB_DIR

fi
}
# -------------------------------------------------------------------------------------------------
sub_dir_ide() {
  if [ -d "$TOOLS_ROOT_DIR/$IDE_SUB" ]; then
    echo "Installing config files in ${IDE_SUB}..."
  else
    ###  Control will jump here if $DIR does NOT exists ###
	echo -e "\nCreating tools sub directory ${GREEN} $SUB_DIR ${RESET} "
    mkdir $TOOLS_ROOT/$IDE_SUB

fi
}


basic_software() (){
 sudo apt -y install python-pip python3-pip apt-transport-https ca-certificates curl gnupg-agent software-properties-commonls

}

# Step #2: User defined function
# ----------------------------------
pause(){
  read -p "Press [Enter] key to continue..." fackEnterKey
}

one(){
	echo "enabeling ssh"
        systemctl start ssh
        systemctl enable ssh
        pause
}
# do something in two()
two(){
	echo "enable autologin"
        sed -i s/#autologin-user=/autologin-user=kali/g /etc/lightdm/lightdm.conf
        sed -i s/#autologin-user-timeout=0/autologin-user-timeout=0/g /etc/lightdm/lightdm.conf
        pause
}
# -------------------------------------------------------------------------------------------------
tree (){
	echo "Create tor user  autologin"
		apt -y install tor
	    adduser --gecos "" toruser
		touch /etc/sudoers.d/toruser
		cp toruser /etc/sudoers.d/
        pause
}
# -------------------------------------------------------------------------------------------------
four(){

	echo -e "\nInstall cairo-dock"
		apt -y install cairo-dock
		mkdir -p /home/$myuser/.config/autostart

		pause
}
# -------------------------------------------------------------------------------------------------
five(){
	echo "install powershell empire"
        cd /opt
		git clone --branch dev https://github.com/EmpireProject/Empire.git
        cd Empire
        setup/install.sh
        pause
}
# -------------------------------------------------------------------------------------------------
six(){

	echo "install atom editor"
		wget https://atom.io/download/deb -O atom.deb
		dpkg -i atom.deb
		pause
}
# -------------------------------------------------------------------------------------------------
seven(){
	echo "install pycharm ide"
		sub_dir_ide
		cd $TOOLS_ROOT/$IDE_SUB
		wget https://download-cf.jetbrains.com/python/pycharm-community-2020.2.tar.gz
		tar -xzvf pycharm-community-2020.2.tar.gz

}
# -------------------------------------------------------------------------------------------------
# function to display menus
show_menus() {
	clear
	echo "~~~~~~~~~~~~~~~~~~~~~"
	echo " M A I N - M E N U"
	echo "~~~~~~~~~~~~~~~~~~~~~"
	echo "Configuration"
	echo "1. Enable ssh service"
	echo "2. Enable autologin kali user"
	echo "3. Create tor user (execute tor without password)"
	echo "Additional software"
	echo "4. Install cairo-dock"
	echo "5. Install Atom Editor"
	echo "6. Install Pycharm IDE"

	echo "5. Exit"
}
# read input from the keyboard and take a action
# invoke the one() when the user select 1 from the menu option.
# invoke the two() when the user select 2 from the menu option.
# Exit when user the user select 3 form the menu option.
read_options(){
	local choice
	read -p "Enter choice [ 1 - 99] 99 for exit  " choice
	case $choice in
		1) one ;;
		2) two ;;
        3) tree ;;
		4) four ;;
		5) five ;;
		6) six ;;
		99) exit 0;;
		*) echo -e "${RED}Error...${STD}" && sleep 2
	esac
}

# ----------------------------------------------
# Step #3: Trap CTRL+C, CTRL+Z and quit singles
# ----------------------------------------------
trap '' SIGINT SIGQUIT SIGTSTP

# -----------------------------------
# Step #4: Main logic - infinite loop
# ------------------------------------
while true
do

	show_menus
	read_options
done
