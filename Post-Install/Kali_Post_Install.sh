#!/bin/bash# A menu driven shell script sample template## ----------------------------------# Step #1: Define variables# ----------------------------------## Bash coloursGREEN="\033[01;32m"YELLOW="\033[01;33m"BLUE="\033[01;34m"BOLD="\033[01;01m"RED="\033[01;31m"RESET="\033[00m"myuser=$(whoami)EDITOR=vimPASSWD=/etc/passwdSTD='\033[0;0;39m'TOOLS_ROOT="/home/kali/tools/"SUB_DIR="wifi"SUB_DIR2="android"IDE_SUB="IDE"INSTALL_DIR=$TOOLS_ROOT/$SUB_DIR#!/bin/bashif [[ $EUID -ne 0 ]]; then    echo "Please run this script with sudo:"    echo -e "\n${RED}Please run this script with sudo ${RESET} "    echo "sudo $0 $*"    exit 1fi# -------------------------------------------------------------------------------------------------create_tools_folders() {	mkdir -p tools/{android,sdr,exploit,web/xss}}# -------------------------------------------------------------------------------------------------create_tools_root() {  if [ -d "$TOOLS_ROOT" ]; then    ### Take action if $DIR exists ###    echo -e "\n tools root directory already exists "  else    ###  Control will jump here if $DIR does NOT exists ###	echo -e "\nCreating tools root directory ${GREEN} $TOOLS_ROOT ${RESET}"    mkdir $TOOLS_ROOT  fi}# -------------------------------------------------------------------------------------------------create_sub_dir() {  if [ -d "$TOOLS_ROOT_DIR/$SUB_DIR" ]; then    echo "Installing config files in ${DIR}..."  else    ###  Control will jump here if $DIR does NOT exists ###	echo -e "\nCreating tools sub directory ${GREEN} $SUB_DIR ${RESET} "    mkdir $TOOLS_ROOT/$SUB_DIRfi}# -------------------------------------------------------------------------------------------------create_sub_dir2() {  if [ -d "$TOOLS_ROOT_DIR/$SUB_DIR" ]; then    echo "Installing config files in ${DIR}..."  else    ###  Control will jump here if $DIR does NOT exists ###	echo -e "\nCreating tools sub directory ${GREEN} $SUB_DIR2 ${RESET} "    mkdir $TOOLS_ROOT/$SUB_DIR2fi}# -------------------------------------------------------------------------------------------------sub_dir_ide() {  if [ -d "$TOOLS_ROOT_DIR/$IDE_SUB" ]; then    echo "Installing config files in ${IDE_SUB}..."  else    ###  Control will jump here if $DIR does NOT exists ###	echo -e "\nCreating tools sub directory ${GREEN} $SUB_DIR ${RESET} "    mkdir $TOOLS_ROOT/$IDE_SUBfi}basic_software(){ sudo apt -y install python-pip python3-pip apt-transport-https ca-certificates curl gnupg-agent software-properties-common}# Step #2: User defined function# ----------------------------------pause(){  read -p "Press [Enter] key to continue..." fackEnterKey}# -------------------------------------------------------------------------------------------------one(){	echo "Enabeling ssh"        systemctl start ssh        systemctl enable ssh        pause}# -------------------------------------------------------------------------------------------------two(){	echo "enable autologin"        sed -i s/#autologin-user=/autologin-user=kali/g /etc/lightdm/lightdm.conf        sed -i s/#autologin-user-timeout=0/autologin-user-timeout=0/g /etc/lightdm/lightdm.conf        pause}# -------------------------------------------------------------------------------------------------three(){	echo "Disable IPv6 GRUB"	    	sed -ie 's/GRUB_CMDLINE_LINUX_DEFAULT="\(.*\)"/GRUB_CMDLINE_LINUX_DEFAULT="quiet splash ipv6.disable=1"/g' /etc/default/grub		    sed -ie 's/GRUB_CMDLINE_LINUX="\(.*\)"/GRUB_CMDLINE_LINUX="ipv6.disable=1"/g'  /etc/default/grub        update-grub	    	pause}# -------------------------------------------------------------------------------------------------four(){	echo "Enable IPv6 GRUB"        sed -ie 's/GRUB_CMDLINE_LINUX_DEFAULT="quiet splash ipv6.disable=1"/GRUB_CMDLINE_LINUX_DEFAULT="quiet"/g' /etc/default/grub        sed -ie 's/GRUB_CMDLINE_LINUX="ipv6.disable=1"/GRUB_CMDLINE_LINUX=""/g'  /etc/default/grub        update-grub	    	pause}# -------------------------------------------------------------------------------------------------twenty(){	echo -e "\nInstall Golang (GO)"	  sudo apt install -y golang    echo "\n" >> ~/.zshrc    echo 'export GOROOT=/usr/lib/go' >> ~/.zshrc    echo 'export GOPATH=$HOME/go' >> ~/.zshrc    echo 'export PATH=$GOPATH/bin:$GOROOT/bin:$PATH' >> ~/.zshrc		pause}# -------------------------------------------------------------------------------------------------twentyone(){	echo -e "\nInstall Node Version Manager (nvm)"    curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.35.3/install.sh | sh		pause}# -------------------------------------------------------------------------------------------------twentytwo(){	echo -e "\nInstall Simple Python version management (pyenv)"		curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | sh		pause}# -------------------------------------------------------------------------------------------------twentythree(){	echo -e "\nInstall Oh-My-Zsh"		wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | zsh		pause}# -------------------------------------------------------------------------------------------------twentyfour(){	echo -e "\nInstall cairo-dock"		apt --fix-broken install -y		apt -y install cairo-dock		mkdir -p /home/kali/.config/autostart		cp autostart_cairo-dock.desktop /home/kali/.config/autostart/		cp cairo-dock.desktop /usr/share/applications/		pause}# -------------------------------------------------------------------------------------------------twentyfive(){	echo -e "\nInstall Oh my zsh"		pause}# -------------------------------------------------------------------------------------------------twentysix(){	echo -e "\nInstall powershell-empire"		apt -y install powershell-empire		pause}# -------------------------------------------------------------------------------------------------thirty(){	echo -e "\nInstall Atom editor"    wget https://atom.io/download/deb -O atom.deb    dpkg -i atom.deb		pause}# -------------------------------------------------------------------------------------------------thirtyone(){	echo -e "\nInstall Google Chrome"	  wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb    dpkg -i google-chrome-stable_current_amd64.deb		pause}# -------------------------------------------------------------------------------------------------thirtytwo(){	echo -e "\nInstall Atom editor"		sub_dir_ide		cd $TOOLS_ROOT/$IDE_SUB		wget https://download-cf.jetbrains.com/python/pycharm-community-2020.2.tar.gz		tar -xzvf pycharm-community-2020.2.tar.gz}# -------------------------------------------------------------------------------------------------thirtythree(){	echo "install android studio"		sub_dir_ide		cd $TOOLS_ROOT/$IDE_SUB		wget https://redirector.gvt1.com/edgedl/android/studio/ide-zips/4.0.1.0/android-studio-ide-193.6626763-linux.tar.gz		tar -xzvf android-studio-ide-193.6626763-linux.tar.gz}# -------------------------------------------------------------------------------------------------forty(){	echo -e "\nInstall bluetooth tools"    apt -y install kali-tools-bluetooth	bluetooth bluez libbluetooth-dev libudev-dev		pause}# -------------------------------------------------------------------------------------------------fortyone(){	echo -e "\nInstall fuzzing tools"    apt -y install kali-tools-fuzzing    kali-tools-voip		pause}# -------------------------------------------------------------------------------------------------fortytwo(){	echo -e "\nInstall sdr tools"    apt -y install kali-tools-sdr		pause}# -------------------------------------------------------------------------------------------------fortythree(){	echo -e "\nInstall wireless tools"    apt -y install kali-tools-802-11		pause}# -------------------------------------------------------------------------------------------------fortyfour(){	echo -e "\nInstall Powershell-Empire"    apt -y install powershell-empire		pause}# -------------------------------------------------------------------------------------------------fortyfive(){	echo -e "\nInstall"		pause}#exiftool# -------------------------------------------------------------------------------------------------# function to display menusshow_menus() {	clear	echo "~~~~~~~~~~~~~~~~~~~~~"	echo " M A I N - M E N U"	echo "~~~~~~~~~~~~~~~~~~~~~"	echo "${BLUE}Configuration${RESET}"	echo "1. Enable ssh service"	echo "2. Enable autologin kali user"	echo "3. Disable ipv6 (update-grub)"	echo "4. Enable ipv6 (update-grub)"	echo "${BLUE}Additional tools${RESET}"  echo "20. Install Golang (GO)"	echo "21. Install Node Version Manager (nvm)"	echo "22. Install Simple Python version management (pyenv)"	echo "23. Install Simple Oh-My-Zsh"  echo "24. Install cairo-dock"	echo "${BLUE}3rd party software${RESET}"	echo "30. Install Atom editor"	echo "31. Install Google Chrome"	echo "32. Install Pycharm IDE"	echo "33. Install Android Studio"  echo "${BLUE}Tools & Metapackages${RESET}" 	echo "40. Install Bluetooth tools"  echo "41. Install Fuzzing tools"  echo "42. Install SDR tools"  echo "43. Install Wireless tools"  echo "44. Install Powershell Empire"#	echo "99. Exit"}# read input from the keyboard and take a actionread_options(){	local choice	read -p "Enter choice [ 1 - 99] 99 for exit  " choice	case $choice in		1) one ;;		2) two ;;    3) three ;;		4) four ;;		5) five ;;		6) six ;;		7) seven ;;    20) twenty  ;;    21) twentyone  ;;    22) twentytwo  ;;    23) twentythree  ;;    24) twentyfour ;;    25) twentyfive ;;    26) twentysix ;;		30) thirty ;;		31) thirtyone ;;		32) thirtytwo ;;		33) thirtythree ;;    40) forty ;;    41) fortyone ;;    42) fortytwo ;;    43) fortythree ;;		99) exit 0;;		*) echo -e "${RED}Error...${STD}" && sleep 2	esac}# ----------------------------------------------# Step #3: Trap CTRL+C, CTRL+Z and quit singles# ----------------------------------------------trap '' SIGINT SIGQUIT SIGTSTP# -----------------------------------# Step #4: Main logic - infinite loop# ------------------------------------while truedo	show_menus	read_optionsdone#mkdir -p {.config/autostart}}