# -*- coding: utf-8 -*-

import logging
import os
from bs4 import BeautifulSoup
import mechanize
import requests
from colorama import Fore, Style

RHOST = "192.168.0.7"

if not os.path.exists('logs'):
    os.makedirs('logs')

logging.basicConfig(filename='../logs/hsts_detector.log', level=logging.DEBUG,
                    format='%(asctime)s %(levelname)s %(name)s %(message)s')
logger = logging.getLogger(__name__)


class ScanHeader:
    def __init__(self):
        self.br = mechanize.Browser()
        self.br.set_handle_robots(False)

        # self.br.set_debug_http(True)
        # br.set_debug_redirects(True)
        # br.set_debug_responses(True)

    def login(self):
        try:
            req = requests.get('http://' + RHOST + '/login.php', verify=False, timeout=(3.05, 27))
            if req.status_code == 200:
                self.br.open("http://" + RHOST)
            else:
                self.br.open("http://" + RHOST + "/dvwa")
            self.br.select_form(nr=0)

            self.br.form['username'] = 'admin'
            self.br.form['password'] = 'password'
            self.br.submit()

            self.br.follow_link(url_regex=r'security.php')
            self.br.select_form(nr=0)  # selects the form
            self.br.form['security'] = ["low"]  # changes the security setting to low
            res = self.br.submit()

            content = res.read()
            soup = BeautifulSoup(content, 'html.parser')
            get_seclevel = soup.find("em")
            seclevel = str(get_seclevel).split("<em>")[1].replace("</em>", "")

            def show_secevel():
                if seclevel == 'high':
                    print("- Security Level:", Fore.LIGHTRED_EX, Style.BRIGHT, seclevel, Style.RESET_ALL)
                elif seclevel == 'medium':
                    print("- Security Level:", Fore.YELLOW, Style.BRIGHT, seclevel, Style.RESET_ALL)
                elif seclevel == 'low':
                    print("- Security Level:", Fore.LIGHTGREEN_EX, Style.BRIGHT, seclevel, Style.RESET_ALL)
                else:
                    print(" other Security Level")

            print("-" * 55)
            print("- " + self.br.title())
            show_secevel()
            print("-" * 55)

        except Exception as err:
            logger.error(err)
            print(err)

    def detect_hsts(self):
        try:
            headers = self.br.response()._headers
            if "Strict-Transport-Security" in headers.keys():
                print("Click Jacking Header present")
            else:
                print(Fore.WHITE, Style.BRIGHT, "Strict-Transport-Security is missing !", Style.RESET_ALL)
                print(Fore.LIGHTRED_EX, Style.BRIGHT, "SSL stripping is possible !", Style.RESET_ALL)

        except Exception as e:
            logger.error(e)
            print(e)


def main():
    automate = ScanHeader()
    automate.login()
    automate.detect_hsts()


if __name__ == '__main__':
    main()
