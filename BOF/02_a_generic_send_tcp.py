import argparse
import subprocess


class Send_TCP():

    def __init__(self, TCP_IP,TCP_PORT,SPIKE_TMPL,SKIP_VAR,SKIP_STR):
        self.TCP_IP = TCP_IP
        self.TCP_PORT = TCP_PORT
        self.SPIKE_TMPL = SPIKE_TMPL
        self.SKIP_VAR = SKIP_VAR
        self.SKIP_STR = SKIP_STR

    def oscmd(self, cmd):
        p = subprocess.Popen(
            cmd, shell=False,
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        stdout, stderr = p.communicate()
        return stdout.decode(), stderr.decode()

    def generic_send_tcp(self):
        desc="Generic Send TCP"
        print('[*] Generic Send TCP')
        send_tcp = 'generic_send_tcp {0} {1} {2} {3} {4}'.format(self.TCP_IP, self.TCP_PORT, self.SPIKE_TMPL, self.SKIP_VAR, self.SKIP_STR)
        out, err = self.oscmd(
            ["terminator", "-T", desc, "-e", send_tcp]
        )

    def run(self):
        self.generic_send_tcp()

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('TCP_IP', type=str, help='Specify IP of the target: e.g. 192.168.1.X')
    parser.add_argument('TCP_PORT', type=int, help='Specify Port of the target: e.g. 443')
    parser.add_argument('SPIKE_TMPL', type=str, help='Specify Spike Template file.spk')
    parser.add_argument('SKIP_VAR', type=int, help='Specify Spike Template file.spk')
    parser.add_argument('SKIP_STR', type=int, help='Specify Spike Template file.spk')
    args = parser.parse_args()
    exec = Send_TCP(args.TCP_IP, args.TCP_PORT, args.SPIKE_TMPL, args.SKIP_VAR, args.SKIP_STR)
    exec.run()