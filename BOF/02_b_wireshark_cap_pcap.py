import subprocess
import os
import argparse
import time

class Packet_Capture():

    def __init__(self,INTERFACE, PCAP_FILE, DST_IP, CAP_TIME):
        self.INTERFACE = INTERFACE
        self.PCAP_FILE = PCAP_FILE
        self.DST_IP = DST_IP
        self.CAP_TIME = CAP_TIME


    def oscmd(self, cmd):
        p = subprocess.Popen(
            cmd, shell=False,
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        #p.wait()

        stdout, stderr = p.communicate()
        return stdout.decode(), stderr.decode()

    def wireshark_pcap(self):
        desc="Wireshark capture tcp traffic"
        print('[*] Starting wireshark')
        #create_msf = 'generic_send_tcp TCP_IP TCP_PORT trun.spk 0 0'.format(self.TCP_IP, self.TCP_PORT)
        create_msf = 'wireshark -i {0} -w {1} -k -Y "ip.dst=={2}"  -a duration:{3}'.format(self.INTERFACE, self.PCAP_FILE, self.DST_IP, self.CAP_TIME)


        out, err = self.oscmd(
            ["terminator", "-T", desc, "-e", create_msf]
        )


    def run(self):
        try:
            self.wireshark_pcap()
        except Exception as e:
            print(e)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('INTERFACE', type=str, help='Specify Interface to capture: e.g. eth0, wlan0')
    parser.add_argument('PCAP_FILE', type=str, help='Specify Pcap file to save`: e.g. saveme.pcap')
    parser.add_argument('DST_IP', type=str, help='Specify IP of the target`: e.g. 192.168.0.X')
    parser.add_argument('CAP_TIME', type=str, help='Specify time to capture in seconds`: e.g. 10')

    args = parser.parse_args()
    exec = Packet_Capture(args.INTERFACE, args.PCAP_FILE, args.DST_IP, args.CAP_TIME)
    exec.run()